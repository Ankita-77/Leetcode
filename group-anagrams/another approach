class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs == null || strs.length == 0) return new ArrayList<>();
        
        Map<String, List<String>> map = new HashMap<>();
        
        for (String s : strs) {
            char[] ca = new char[26]; 
            // Use char[] to count frequency cause char range [0,127] 
            
            for (char c : s.toCharArray()) ca[c - 'a']++;
            String keyStr = String.valueOf(ca);
            if (!map.containsKey(keyStr)) map.put(keyStr, new ArrayList<>());
            map.get(keyStr).add(s);
            // if contains just add if not then create new Arraylist
        }
        return new ArrayList<>(map.values());
    }
}

// time complexity = O(NK) N is length of strs, k is max length of a string in strs.
// space complexity = O(NK)
